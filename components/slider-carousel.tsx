"use client";
import { useEffect, useState } from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { TreeSlider } from "@/components/tree-slider";
import { cn } from "@/lib/utils";
import RangeSlider from "./ui/range-slider";

interface SlideProps {
  title: string;
  subtitle: string;
  value: string;
  unit: string;
  description: string;
  component: React.ReactNode;
}

const slides: SlideProps[] = [
  {
    title: "1 Carbon Credit equals ~ $1.64",
    subtitle: "One hectare of trees removes 4-40 tonnes of CO₂",
    value: "35.2",
    unit: "USD",
    description: "Trees remove on an average of 4-40 tonnes of CO₂ per hectare per year",
    component: <TreeSlider maxSlider={100} pricePerCredit={291} icon="tree" />
  },
  {
    title: "10kW solar setup equals ~ $3.30",
    subtitle: "1 Solar Credit equals",
    value: "3.30",
    unit: "USD",
    description: "Carbon credits generated by solar panels are issued every year",
    component: <TreeSlider maxSlider={1000} pricePerCredit={2.30} icon="solar" /> // Replace with SolarSlider
  },
  {
    title: "10kW wind turbine equals ~ $5.00",
    subtitle: "1 Wind Credit equals",
    value: "5.00",
    unit: "USD",
    description: "1-10KW wind turbine can generate an average of $200-2000 per year",
    component: <TreeSlider maxSlider={1000} pricePerCredit={5.00} icon="wind" /> // Replace with WindSlider
  }
];
export const SliderCarousel = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % slides.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
  };

 
  return (
    <>
    
    <div className="absolute top-[35%] left-1/2 -translate-y-1/2 -translate-x-1/2 flex items-center justify-center w-[355px] h-[100px] text-white z-[20] rounded-xl inset-0.5">
        <button 
          onClick={prevSlide}
          className="absolute left-0 z-10 p-2 rounded-full bg-black/40 hover:bg-black/60 transition-colors"
        >
          <ChevronLeft className="w-6 h-6" />
        </button>
        
        <button 
          onClick={nextSlide}
          className="absolute right-0 z-10 p-2 rounded-full bg-black/40 hover:bg-black/60 transition-colors"
        >
          <ChevronRight className="w-6 h-6" />
        </button>
    </div>



            {/* <h2 className="text-xl">{slides[currentSlide].title}</h2> */}
            {/* <p className="text-md text-gray-400 text-center">{slides[currentSlide].description}</p> */}
     <div className="relative drop-shadow-xl w-[355px] h-[270px] overflow-hidden rounded-xl bg-[#100943] z-[10] mt-2 ml-7 bg-opacity-0">
    {/*  <div className="relative flex items-center justify-center text-white z-[2] rounded-xl inset-0.5 bg-green-950 bg-opacity-0">
        <div className="flex flex-col items-center justify-between max-w-[400px] w-full rounded-3xl p-4">
          <div className="flex flex-col gap-4 items-center">
            <div className="flex-col flex py-4 gap-2.5">
              {slides[currentSlide].component}
            </div>
            <p className="text-md text-gray-400 text-center">
              {slides[currentSlide].title}
            </p>
          </div>
        </div>
      </div> */}

<div
      className="relative drop-shadow-xl w-[355px] h-[275px] overflow-hidden rounded-xl bg-[#1d1064]"
    >
      <div
        className="absolute flex items-center justify-center text-white z-[1] opacity-90 rounded-xl inset-0.5 bg-[#040a35]"
      >
        <div className="flex flex-col items-center justify-between max-w-[400px] w-full rounded-3xl p-4">
          <div className="flex flex-col gap-4 items-center">
            {/* <h2 className="text-xl">{slides[currentSlide].title}</h2> */}
            <div className="flex-col flex py-4 gap-2.5">
              {slides[currentSlide].component}
            </div>
            {/* <p className="text-md text-gray-400 text-center">
              {slides[currentSlide].description}
            </p> */}
            <p className="text-md text-gray-400 text-center">
              {slides[currentSlide].title}
            </p>
          </div>
        </div>
      </div>
      <div className="absolute w-56 h-48 bg-white blur-[50px] -left-1/2 -top-1/2"></div>
    </div>
      
      <div className="absolute bottom-2 left-1/2 -translate-x-1/2 flex gap-2">
        {slides.map((_, index) => (
          <button
            key={index}
            onClick={() => setCurrentSlide(index)}
            className={cn(
              "w-2 h-2 rounded-full transition-colors",
              currentSlide === index ? "bg-white" : "bg-white/30"
            )}
          />
        ))}
      </div>
      
      <div className="absolute w-full h-full bg-blue-700 bg-opacity-20 blur-[100px] -left-1/2 -top-1/2" />
    </div>
    </>
  );
}